import sys

class BLASTReader(object):#has variables (properties) and functionality, class is how to define functionality of object
    def __init__(self, file):#refers to object
        self.file=file
        self.last_sid=None #none because havent read anything yet
    def next(self):                     #highlight, command, right bracket to indent all once 
        if self.last_sid is None:
            line = sys.stdin.readline()  #read first line of file
            #assert line.startswith(">")     #make sure is fasta file
            sid = line[1:].rstrip("\r\n")   #takes every character after first character, remove first character
        else:
            sid = self.last_sid
            #add for turning into iterator
            
        sequences = []  #list of accumulated data
        while True:            # keep reading lines from file
            line=sys.stdin.readline()
            if line == "" and not sequences:                  #add for turning into iterator, "and not sequences"-if dont have any sequences, stop iteration
                raise StopIteration
            elif line.startswith("> N") or line == "":  #if line starts with > then break to new line
                self.last_sid = line[1:].rstrip("\r\n")  #saving on object with blast id
                break
            else:
                sequences.append(line.strip())  #want white space gone from either end of line
    
        sequence = " ".join(sequences)  #takes each element of list and joins them together
        Identities = .split(" ")[13]
        Gaps = .split(" ")[18]
        return sid, sequences        #returns values from function or method as opposed to printing that gives data
#print sid, sequence
    def __iter__(self):     
        return self    ##add for turning into iterator
        
